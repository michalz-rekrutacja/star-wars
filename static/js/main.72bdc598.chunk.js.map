{"version":3,"sources":["serviceWorker.ts","components/Header/index.tsx","utils/random-number/index.ts","configuration.ts","utils/fetch-starship/index.ts","utils/draw-winner/index.ts","utils/validate-card/index.ts","components/Panel/index.tsx","components/GameCard/index.tsx","components/Information/index.tsx","components/Wrapper/index.tsx","components/App/index.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","useStyles","makeStyles","theme","createStyles","wrapper","color","palette","background","default","backgroundColor","text","primary","width","padding","margin","textAlign","boxShadow","shadows","heading","highlight","Header","classes","className","getRandomNumber","min","max","Math","floor","random","configuration","API_ROOT","MAX_RETRIES","MIN_ID","MAX_ID","fetchStarship","a","async","success","retryCounter","data","id","fetch","status","json","starshipData","name","model","passengers","Number","crew","drawWinner","first","second","validateCard","obj","Panel","props","handleRefresh","Grid","container","direction","justify","alignItems","item","scoreFirst","scoreSecond","winner","Button","onClick","e","preventDefault","variant","GameCard","Card","CardContent","Typography","gutterBottom","component","Information","xs","align","Wrapper","useState","fetching","setFetching","error","setError","setWinner","setScoreFirst","setScoreSecond","cardData","setCardData","fetchData","fetched","i","push","Array","isArray","length","prev","useEffect","spacing","map","singleCard","index","md","key","App","CssBaseline","Container","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.72bdc598.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    wrapper: {\n      color: theme.palette.background.default,\n      backgroundColor: theme.palette.text.primary,\n      width: 'fit-content',\n      padding: '1rem 3rem',\n      margin: '2rem auto',\n      textAlign: 'center',\n      boxShadow: theme.shadows[15]\n    },\n    heading: {\n      margin: 0\n    },\n    highlight: {\n      margin: 0,\n      padding: 0\n    }\n  })\n);\n\ninterface HeaderProps {\n  heading: string;\n  highlight: string;\n}\n\nconst Header: React.FC<HeaderProps> = ({\n  heading = 'Star Wars',\n  highlight = 'The never-ending battle'\n}) => {\n  const classes = useStyles();\n\n  return (\n    <header className={classes.wrapper}>\n      <h1 className={classes.heading}>{heading}</h1>\n      <h4 className={classes.highlight}>{highlight}</h4>\n    </header>\n  );\n};\n\nexport default Header;\n","const getRandomNumber = (min: number, max: number): number => {\n  if (typeof min === 'number' && typeof max === 'number') {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  }\n\n  return 0;\n};\n\nexport default getRandomNumber;\n","const configuration = {\n  API_ROOT: 'https://swapi.co/api',\n  MAX_RETRIES: 5,\n  MIN_ID: 1,\n  MAX_ID: 37\n};\n\nexport default configuration;\n","import getRandomNumber from '../random-number';\nimport { StarshipProps } from '../../components/GameCard';\n\nimport configuration from '../../configuration';\n\nconst fetchStarship = async (): Promise<StarshipProps | 0> => {\n  let success = false;\n  let retryCounter = 0;\n  let data: any = {}; // eslint-disable-line @typescript-eslint/no-explicit-any\n\n  while (!success && retryCounter < configuration.MAX_RETRIES) {\n    const id = getRandomNumber(configuration.MIN_ID, configuration.MAX_ID);\n    data = await fetch(\n      `${configuration.API_ROOT}/starships/${id}/?format=json`\n    );\n    success = data.status === 200 ? true : false;\n    retryCounter++;\n  }\n\n  if (!success && retryCounter >= configuration.MAX_RETRIES) {\n    return 0;\n  }\n\n  const starshipData = await data.json();\n\n  return {\n    name: starshipData.name,\n    model: starshipData.model,\n    passengers: Number(starshipData.passengers),\n    crew: Number(starshipData.crew)\n  };\n};\n\nexport default fetchStarship;\n","const drawWinner = (first: number, second: number): 0 | 1 | 2 => {\n  if (typeof first !== 'number' || typeof second !== 'number') {\n    return 0;\n  }\n  if (first > second) {\n    return 1;\n  }\n\n  if (second > first) {\n    return 2;\n  }\n\n  return 0;\n};\n\nexport default drawWinner;\n","import { StarshipProps } from '../../components/GameCard';\n\nconst validateCard = (obj: StarshipProps): boolean => {\n  if (\n    typeof obj === 'object' &&\n    typeof obj.name === 'string' &&\n    typeof obj.model === 'string' &&\n    typeof obj.crew === 'number' &&\n    typeof obj.passengers === 'number'\n  ) {\n    return true;\n  }\n\n  return false;\n};\n\nexport default validateCard;\n","import React from 'react';\nimport { Button, Grid } from '@material-ui/core';\n\ninterface PanelProps {\n  handleRefresh: () => void;\n  winner: number | undefined;\n  scoreFirst: number;\n  scoreSecond: number;\n}\n\nconst Panel: React.FC<PanelProps> = props => {\n  if (typeof props.handleRefresh !== 'function') {\n    return null;\n  }\n\n  const handleClick = (e: React.MouseEvent): void => {\n    e.preventDefault();\n    props.handleRefresh();\n  };\n\n  return (\n    <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\n      <Grid item>\n        <h2>Results:</h2>\n        {typeof props.scoreFirst === 'number' && (\n          <p>Player 1: {props.scoreFirst}</p>\n        )}\n        {typeof props.scoreSecond === 'number' && (\n          <p>Player 2: {props.scoreSecond}</p>\n        )}\n        {(props.winner === 1 || props.winner === 2) && (\n          <h4>Player {props.winner} won!</h4>\n        )}\n        {props.winner === 0 && <h4>Tie!</h4>}\n        <Button onClick={handleClick} variant=\"contained\" color=\"primary\">\n          Try again\n        </Button>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Panel;\n","import React from 'react';\nimport { Card, CardContent, Typography } from '@material-ui/core';\n\nimport validateCard from '../../utils/validate-card';\n\nexport interface StarshipProps {\n  name: string;\n  model: string;\n  passengers: number;\n  crew: number;\n}\n\nconst GameCard: React.FC<StarshipProps> = props => {\n  if (!validateCard) {\n    return null;\n  }\n\n  return (\n    <Card>\n      <CardContent>\n        <Typography color=\"textSecondary\" gutterBottom>\n          {props.model}\n        </Typography>\n        <Typography gutterBottom variant=\"h5\" component=\"h2\">\n          {props.name}\n        </Typography>\n        <p>Passengers: {props.passengers}</p>\n        <p>Crew: {props.crew}</p>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default GameCard;\n","import React from 'react';\nimport { Typography, Grid } from '@material-ui/core';\n\ninterface InformationProps {\n  text: string;\n}\n\nconst Information: React.FC<InformationProps> = ({ text }) => {\n  if (!text) {\n    return null;\n  }\n\n  return (\n    <Grid item xs={12}>\n      <Typography align=\"center\">{text}</Typography>\n    </Grid>\n  );\n};\n\nexport default Information;\n","import React, { useState, useEffect } from 'react';\nimport { Grid } from '@material-ui/core';\n\nimport fetchStarship from '../../utils/fetch-starship';\nimport drawWinner from '../../utils/draw-winner';\nimport validateCard from '../../utils/validate-card';\n\nimport Panel from '../Panel';\nimport GameCard, { StarshipProps } from '../GameCard';\nimport Information from '../Information';\n\nconst Wrapper: React.FC = () => {\n  const [fetching, setFetching] = useState<boolean>(false);\n  const [error, setError] = useState<boolean>(false);\n  const [winner, setWinner] = useState<number>();\n  const [scoreFirst, setScoreFirst] = useState<number>(0);\n  const [scoreSecond, setScoreSecond] = useState<number>(0);\n  const [cardData, setCardData] = useState<StarshipProps[]>([]);\n\n  const fetchData = async (): Promise<void> => {\n    setError(false);\n    setFetching(true);\n    const fetched: StarshipProps[] = [];\n\n    for (let i = 0; i < 2; i++) {\n      const data = await fetchStarship();\n\n      if (typeof data === 'object') {\n        fetched.push(data);\n      }\n\n      if (data === 0) {\n        setError(true);\n        setCardData([]);\n      }\n    }\n\n    setFetching(false);\n\n    if (\n      Array.isArray(fetched) &&\n      fetched.length === 2 &&\n      validateCard(fetched[0]) &&\n      validateCard(fetched[1])\n    ) {\n      const winner = drawWinner(fetched[0].crew, fetched[1].crew);\n      switch (winner) {\n        case 0:\n          setScoreFirst(prev => prev + 1);\n          setScoreSecond(prev => prev + 1);\n          break;\n        case 1:\n          setScoreFirst(prev => prev + 1);\n          break;\n        case 2:\n          setScoreSecond(prev => prev + 1);\n          break;\n      }\n      setWinner(winner);\n      setCardData(fetched);\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  return (\n    <Grid container justify=\"center\" alignItems=\"center\" spacing={3}>\n      <Panel\n        handleRefresh={fetchData}\n        winner={winner}\n        scoreFirst={scoreFirst}\n        scoreSecond={scoreSecond}\n      />\n      {!error &&\n        !fetching &&\n        cardData.length === 2 &&\n        validateCard(cardData[0]) &&\n        validateCard(cardData[1]) && (\n          <>\n            {cardData.map((singleCard: StarshipProps, index: number) => (\n              <Grid item xs={12} md={5} key={`${singleCard.name}_${index}`}>\n                <h2>Player {index + 1}:</h2>\n                <GameCard\n                  name={singleCard.name}\n                  model={singleCard.model}\n                  passengers={singleCard.passengers}\n                  crew={singleCard.crew}\n                />\n              </Grid>\n            ))}\n          </>\n        )}\n      {fetching && <Information text=\"Fetching...\" />}\n      {!fetching && error && (\n        <Information text=\"Error fetching data from the API - try again...\" />\n      )}\n    </Grid>\n  );\n};\n\nexport default Wrapper;\n","import React from 'react';\nimport { CssBaseline, Container, Grid } from '@material-ui/core';\n\nimport Header from '../Header';\nimport Wrapper from '../Wrapper';\n\nconst App: React.FC = () => {\n  return (\n    <>\n      <CssBaseline />\n      <Header heading=\"Star Wars\" highlight=\"Battle for galaxy\" />\n      <Container>\n        <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\n          <Wrapper />\n        </Grid>\n      </Container>\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}