{"version":3,"sources":["serviceWorker.ts","components/Header/index.tsx","components/Wrapper/index.tsx","components/App/index.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","useStyles","makeStyles","theme","createStyles","wrapper","color","palette","background","default","backgroundColor","text","primary","width","padding","margin","textAlign","boxShadow","shadows","heading","highlight","Header","classes","className","Wrapper","Grid","container","xs","item","md","App","CssBaseline","Container","direction","justify","alignItems","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6LAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4CCfAC,EAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXC,QAAS,CACPC,MAAOH,EAAMI,QAAQC,WAAWC,QAChCC,gBAAiBP,EAAMI,QAAQI,KAAKC,QACpCC,MAAO,cACPC,QAAS,YACTC,OAAQ,YACRC,UAAW,SACXC,UAAWd,EAAMe,QAAQ,KAE3BC,QAAS,CACPJ,OAAQ,GAEVK,UAAW,CACTL,OAAQ,EACRD,QAAS,QAwBAO,EAduB,SAAC,GAGhC,IAAD,IAFJF,eAEI,MAFM,YAEN,MADJC,iBACI,MADQ,0BACR,EACEE,EAAUrB,IAEhB,OACE,4BAAQsB,UAAWD,EAAQjB,SACzB,wBAAIkB,UAAWD,EAAQH,SAAUA,GACjC,wBAAII,UAAWD,EAAQF,WAAYA,KCrB1BI,EAbW,WACxB,OACE,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,GAAI,GAClB,kBAACF,EAAA,EAAD,CAAMG,MAAI,EAACD,GAAI,GAAIE,GAAI,GACrB,+BAEF,kBAACJ,EAAA,EAAD,CAAMG,MAAI,EAACD,GAAI,GAAIE,GAAI,GACrB,iCCUOC,EAdO,WACpB,OACE,oCACE,kBAACC,EAAA,EAAD,MACA,kBAAC,EAAD,CAAQZ,QAAQ,YAAYC,UAAU,sBACtC,kBAACY,EAAA,EAAD,KACE,kBAACP,EAAA,EAAD,CAAMC,WAAS,EAACO,UAAU,MAAMC,QAAQ,SAASC,WAAW,UAC1D,kBAAC,EAAD,UCRVC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SJqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8e46a02a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    wrapper: {\n      color: theme.palette.background.default,\n      backgroundColor: theme.palette.text.primary,\n      width: 'fit-content',\n      padding: '1rem 3rem',\n      margin: '2rem auto',\n      textAlign: 'center',\n      boxShadow: theme.shadows[15]\n    },\n    heading: {\n      margin: 0\n    },\n    highlight: {\n      margin: 0,\n      padding: 0\n    }\n  })\n);\n\ninterface HeaderProps {\n  heading: string;\n  highlight: string;\n}\n\nconst Header: React.FC<HeaderProps> = ({\n  heading = 'Star Wars',\n  highlight = 'The never-ending battle'\n}) => {\n  const classes = useStyles();\n\n  return (\n    <header className={classes.wrapper}>\n      <h1 className={classes.heading}>{heading}</h1>\n      <h4 className={classes.highlight}>{highlight}</h4>\n    </header>\n  );\n};\n\nexport default Header;\n","import React from 'react';\n\nimport { Grid } from '@material-ui/core';\n\nconst Wrapper: React.FC = () => {\n  return (\n    <Grid container xs={8}>\n      <Grid item xs={12} md={6}>\n        <div />\n      </Grid>\n      <Grid item xs={12} md={6}>\n        <div />\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Wrapper;\n","import React from 'react';\n\nimport { CssBaseline, Container, Grid } from '@material-ui/core';\n\nimport Header from '../Header';\nimport Wrapper from '../Wrapper';\n\nconst App: React.FC = () => {\n  return (\n    <>\n      <CssBaseline />\n      <Header heading=\"Star Wars\" highlight=\"Battle for galaxy\" />\n      <Container>\n        <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\n          <Wrapper />\n        </Grid>\n      </Container>\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}